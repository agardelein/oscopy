""" Definition of oscopy magic functions for ipython


"""
#from __future__ import with_statement
GETTEXT_DOMAIN = 'oscopy'
import gettext
gettext.install(GETTEXT_DOMAIN, '@datarootdir@/locale')
t = gettext.translation(GETTEXT_DOMAIN, '@datarootdir@/locale', fallback=True)
_ = t.gettext
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('PangoCairo', '1.0')
import IPython
from IPython.config.configurable import Configurable
from IPython.utils.traitlets import Bool, Unicode
from IPython.utils.syspathcontext import prepended_to_syspath
import time
import os
import re
import dbus, dbus.service
import numpy

from oscopy import Signal
from oscopy import Context
from oscopy import ReadError
from oscopy import WriteError
from oscopy import MAX_GRAPHS_PER_FIGURE, factors_to_names, abbrevs_to_factors
from oscopy_ipython import IOscopyApp

_globals = globals()
_globals['Signal'] = Signal
_current_figure = None
_current_graph = None
_figcount = 0
_autorefresh = True
bus_name = None
_ctxt = Context()

class IOscopyConfig(Configurable):
    h = Bool(False, config=True, help=_('Show this help message'))
    q = Bool(False, config=True, help=_('Disable banner printing'))
    b = Bool(False, config=True, help=_('Execute an oscopy command file'))
    i = Bool(False, config=True, help=_('Resume to command line executing after batch file'))
    f = Unicode('', config=True, help='')
    

def do_create(self, args):
    """ocreate [SIG [, SIG [, SIG]...]]
    Create a new figure, set_ it as current, add the signals"""
    sigs = _ctxt.names_to_signals(get_signames(args))
    # Delegate the call to Context.create() to the GUI
    # Finally it does %oselect for the _current_figure and _current_graph
    fig = ioscopy_app.create(sigs)

def do_destroy(self, args):
    """odestroy FIG#
    Destroy a figure"""
    global _current_figure
    global _current_graph
    if not args.isdigit():
        raise TypeError(_("do_destroy: Bad argument"))
    else:
        fignum = eval(args)
    _ctxt.destroy(fignum)
    ioscopy_app.destroy(args)
    # Go back to the first graph of the first figure or None
    _current_figure = None
    _current_graph = None

def do_select(self, args):
    """oselect FIG#-GRAPH#
    Select the current figure and the current graph"""
    global _current_figure
    global _current_graph
    if not args:
        raise TypeError(_("do_select: no args"))
    s = args.split('-')
    if not s[0].isdigit() or len(s) < 2 or not s[1].isdigit():
        raise IndexError(_("do_select: bad figure or graph number"))
    num = eval(s[0])
    gn = eval(s[1])
    _current_figure = _ctxt.figures[num - 1]
    if len(_current_figure.graphs) and\
            (gn - 1) < len(_current_figure.graphs) and\
            (gn - 1) >= 0:
        _current_graph = _current_figure.graphs[gn - 1]
    else:
        _current_graph = None

def do_layout(self, args):
    """olayout horiz|vert|quad
    Define the layout of the current figure"""
    global _current_figure
    if _current_figure is not None:
        _current_figure.layout = args
    do_refresh(self, '')

def do_figlist(self, args):
    """ofiglist
    Print the list of figures"""
    global _current_figure
    global _current_graph
    SEPARATOR = " "
    for fn, f in enumerate(_ctxt.figures):
        if f is not None:
            print(_("%s Figure %d: %s") %\
                ([" ", "*"][f == _current_figure],\
                     fn + 1, f.layout))
            for gn, g in enumerate(f.graphs):
                print(_("    %s Graph %d : (%s) %s") %\
                    ([" ","*"][g == _current_graph],\
                         gn + 1, g.type,\
                         SEPARATOR.join(list(g.signals.keys()))))

def do_read(self, arg):
    """oread DATAFILE
    Read signal file"""
    global _globals

    fn = os.path.abspath(os.path.expanduser(arg))
    if fn in list(_ctxt.readers.keys()):
        print(_("%s already read, use update to reread it") % fn)
        return
    try:
        sigs = _ctxt.read(fn)
        ioscopy_app.add_file(fn)
        _globals.update(sigs)
    except ReadError as e:
        print(_('Failed to read %s:') % fn, e)
    except NotImplementedError:
        print(_("File format not supported"))

def do_write(self, args):
    """owrite format [(OPTIONS)] FILE SIG [, SIG [, SIG]...]
    Save signals to file"""
    # Extract format, options and signal list
    tmp = re.search(r'(?P<fmt>\w+)\s*(?P<opts>\([^\)]*\))?\s+(?P<fn>[\w\./]+)\s+(?P<sigs>\w+(\s*,\s*\w+)*)', args)
    
    if tmp is None:
        raise TypeError(_("do_write: Bad arguments"))
    fmt = tmp.group('fmt')
    fn = tmp.group('fn')
    opt = tmp.group('opts')
    sns = get_signames(tmp.group('sigs'))
    opts = {}
    if opt is not None:
        for on in opt.strip('()').split(','):
            tmp = on.split(':', 1)
            if len(tmp) == 2:
                opts[tmp[0]] = tmp[1]
    try:
        _ctxt.write(fn, fmt, sns, opts)
    except WriteError as e:
        print(_("Write error:"), e)
    except NotImplementedError:
        print(_("File format not supported"))

def do_update(self, args):
    """oupdate
    Reread data files"""
    if not args:
        _ctxt.update()
    else:
        if args in _ctxt.readers:
            _ctxt.update(_ctxt.readers[args])
        else:
            print(_("%s not found in readers") % args)
    ioscopy_app.update_readers()
    do_refresh(self, '')

def do_add(self, args):
    """oadd SIG [, SIG [, SIG]...]
    Add a graph to the current figure.
    If no figure is selected, then create a new one"""
    global _current_figure
    global _current_graph

    if _current_figure is not None:
        if len(_current_figure.graphs) == MAX_GRAPHS_PER_FIGURE:
            print(_("Maximum graph number reached"))
            return
        _current_figure.add(_ctxt.names_to_signals(\
                get_signames(args)))
        _current_graph = _current_figure.graphs[-1]
    else:
        do_create(self, args)
    do_refresh(self, '')

def do_delete(self, args):
    """odelete GRAPH#
    Delete a graph from the current figure"""
    global _current_figure
    global _current_graph

    if _current_figure is not None:
        _current_figure.delete(int(args))
        if _current_figure.graphs:
            _current_graph = _current_figure.graphs[0]
        else:
            _current_graph = None
    do_refresh(self, '')

def do_mode(self, args):
    """omode MODE
    Set the type of the current graph of the current figure.
    Available modes :
    lin      Linear graph
    polar    Polar graph
    smith    Smith Chart graph
    eye      Eye diagram graph"""
    global _current_figure
    global _current_graph
    if _current_graph is None:
        return
    args = args.split()
    opts = {}
    mode = args[0]
    for arg in args[1:]:
        (kw, value) = arg.split('=')
        try:
            opts[kw] = float(value)
        except ValueError:
            opts[kw] = value
            
    idx = _current_figure.graphs.index(_current_graph)
    _current_figure.set_mode(_current_graph, mode, **opts)
    _current_graph = _current_figure.graphs[idx]
    do_refresh(self, '')

def do_scale(self, args):
    """oscale [lin|logx|logy|loglog]
    Set the axis scale"""
    global _current_graph
    if _current_graph is None:
        return
    _current_graph.scale = args
    do_refresh(self, '')

def do_range(self, args):
    """orange [x|y min max]|[xmin xmax ymin ymax]|[reset]
    Set the axis range of the current graph of the current figure
    """
    global _current_graph
    if _current_graph is None:
        return

    range = args.split()
    if len(range) == 1:
        if range[0] == "reset":
            _current_graph.range = range[0]
    elif len(range) == 3:
        if range[0] == 'x' or range[0] == 'y':
            _current_graph.range = range[0],\
                [float(range[1]), float(range[2])]
    elif len(range) == 4:
        _current_graph.range = [float(range[0]), float(range[1]),\
                                    float(range[2]), float(range[3])]
    do_refresh(self, '')

def do_unit(self, args):
    """ounit [XUNIT,] YUNIT
    Set the unit to be displayed on graph axis"""
    global _current_graph
    units = args.split(",", 1)
    if len(units) < 1 or _current_graph is None\
            or not _current_graph.signals:
        return
    elif len(units) == 1:
        _current_graph.unit = units[0].strip(),
    elif len(units) == 2:
        _current_graph.unit = units[0].strip(), units[1].strip()
    else:
        return
    do_refresh(self, '')

def do_insert(self, args):
    """oinsert SIG [, SIG [, SIG]...]
    Insert a list of signals into the current graph"""
    global _current_graph
    if _current_graph is None:
        return
    _current_graph.insert(_ctxt.names_to_signals(get_signames(args)))
    do_refresh(self, '')

def do_remove(self, args):
    """oremove SIG [, SIG [, SIG]...]
    Delete a list of signals into from current graph"""
    global _current_graph
    if _current_graph is None:
        return
    _current_graph.remove(_ctxt.names_to_signals(get_signames(args)))
    do_refresh(self, '')

def do_freeze(self, args):
    """ofreeze SIG [, SIG [, SIG]...]
    Do not consider signal for subsequent updates"""
    _ctxt.freeze(get_signames(args))
    ioscopy_app.freeze(args)

def do_unfreeze(self, args):
    """ofreeze SIG [, SIG [, SIG]...]
    Consider signal for subsequent updates"""
    _ctxt.unfreeze(get_signames(args))
    ioscopy_app.freeze(args)

def do_siglist(self, args):
    """osiglist
    List loaded signals"""
    SEPARATOR = "\t"
    HEADER=[_("Name"), _("Unit"), _("Ref"), _("Reader"),_("Last updated (sec)")]
    print(SEPARATOR.join(HEADER))
    t = time.time()
    for reader_name, reader in _ctxt.readers.items():
        for signal_name, signal in reader.signals.items():
            print(SEPARATOR.join((signal_name, \
                                      str(signal.unit),\
                                      signal.ref.name,\
                                      reader_name,\
                                      str(int(t - reader.info['last_update'])))))

def do_exec(self, fname):
    """oexec FILENAME
    execute commands from file"""
    # Inspired from IPython's InteractiveShellApp._execfile()
    fname = os.path.abspath(os.path.expanduser(fname))
    try:
        with open(fname) as thefile:
            pass
    except:
        print(_('Could not open file <%s> for execution.') % fname)
        return

    # Find things also in current directory.  This is needed to mimic the
    # behavior of running a script from the system command line, where
    # Python inserts the script's directory into sys.path
    dname = os.path.dirname(fname)
    ip = get_ipython()
    with prepended_to_syspath(dname):
        try:
            with open(fname) as thefile:
                for line in thefile:
                    r = line.split(None, 1)
                    if r and ip.find_magic(r[0]):
                        r = [r[0], r[1] if len(r) > 1 else '']
                        ip.run_line_magic(r[0], r[1].strip())
                    else:
                        ip.ex(line)
        except:
            ip.showtraceback()
            print(_('Unknown failure executing file: <%s>') % fname)

def do_factors(self, args):
    """ofactors X, Y
    set the scaling factor of the graph (in power of ten)
    use 'auto' for automatic scaling factor
    e.g. factor -3, 6 set the scale factor at 1e-3 and 10e6"""
    global _current_graph
    if _current_graph is None:
        return
    factors = [None, None]
    for i, f in enumerate(args.split(',')):
        if i > 1:
            break
        factor = f.strip()
        if factor.isdigit() or (len(factor) > 1 and factor[0] == '-' and\
                                    factor[1:].isdigit()):
            factors[i] = int(factor)
        else:
            if factor == 'auto':
                factors[i] = None
            else:
                factors[i] = abbrevs_to_factors[factor]
    _current_graph.set_scale_factors(factors[0], factors[1])
    do_refresh(self, '')

def do_refresh(self, args):
    """orefresh FIG#|on|off|current|all'
    on|off       toggle auto refresh of current figure
    current|all  refresh either current figure or all
    FIG#         figure to refresh
    without arguments refresh current figure"""
    global _current_figure
    global _current_graph
    global _autorefresh

    if args == 'on':
        _autorefresh = True
    elif args == 'off':
        _autorefresh = False
    elif args == 'current' or args == '':
        if _current_figure is not None and\
                _current_figure.canvas is not None:
            _current_figure.canvas.draw()
    elif args == 'all':
        for fig in _ctxt.figures:
            if fig.canvas is not None:
                fig.canvas.draw()
    elif args.isdigit():
        fignum = int(args) - 1
        if fignum >= 0 and fignum < len(_ctxt.figures):
            if _ctxt.figures[fignum].canvas is not None:
                print(_('refreshing'))
                _ctxt.figures[fignum].canvas.draw()

def do_gui(self, args):
    """ogui
    Invoke the oscopy gui
    """
    ioscopy_app.w.show_all()

def do_import(self, args):
    """oimport
    Import a signal into the oscopy context.
    This is done through the signal_reader class
    """
    global _globals
    for name in args.split(','):
        try:
            sig = _globals.get(name)
            print(sig, name)
            sigs = _ctxt.import_signal(sig, name)
            for s in sigs.values():
                _globals[s.name] = s
            ioscopy_app.add_file("%s=%s" % (name, sig.name))
        except ReadError as e:
            print(_("Error: Signal not recognized (%s)") % e)
            return
#    _globals.update(sigs)

def do_context(self, args):
    """ocontext
    Returns the context used by the module
    """
    global _ctxt
    return _ctxt

def get_signames(args):
    """Return the signal names list extracted from the commandline
    The list must be a coma separated list of signal names.
    If no signals are loaded of no signal are found, return []
    """
    sns = []
    if args == "":
        sns = []
    else:
        for sn in args.split(","):
            sns.append(sn.strip())
    return sns

def make_ufunc_unary(ufunc_name):
        def oscopy_ufunc_unary(s, out=None):
            if not isinstance(s, Signal):
                if out is None:
                    out = getattr(numpy, ufunc_name)(s)
                else:
                    out = getattr(numpy, ufunc_name)(s, out)
                return out
            s_name = s.name if isinstance(s, Signal) else str(s)
            s_data = s.data if isinstance(s, Signal) else s
            name = '%s(%s)' % (ufunc_name, s_name)

            if out is None:
                out = Signal(name, None)
                out.data = getattr(numpy, ufunc_name)(s.data)
            else:
                getattr(numpy, ufunc_name)(s.data, out.data)
            # The new signal has the reference of this signal
            out.ref = s.ref
            out.freeze = s.freeze
            # Handle dependencies
            if isinstance(s, Signal):
                s.connect('changed', out.on_changed, s)
                s.connect('begin-transaction', out.on_begin_transaction)
                s.connect('end-transaction', out.on_end_transaction)
            out.connect('recompute', out.on_recompute, (getattr(numpy, ufunc_name), s, out))
            return out
        return oscopy_ufunc_unary

def make_ufunc_binary(ufunc_name):
        uf = getattr(numpy, ufunc_name)
        def oscopy_ufunc_binary(s1, s2, out=None):
            if not isinstance(s1, Signal) and not isinstance(s2, Signal):
                if out is None:
                    return uf(s1, s2)
                else:
                    return uf(s1, s2, out)
            s1_name = s1.name if isinstance(s1, Signal) else str(s1)
            s1_data = s1.data if isinstance(s1, Signal) else s1
            s2_name = s2.name if isinstance(s2, Signal) else str(s2)
            s2_data = s2.data if isinstance(s2, Signal) else s2
            name = '%s(%s, %s)' % (ufunc_name, s1_name, s2_name)

            if out is None:
                out = Signal(name, None)
                out.data = uf(s1_data, s2_data)
            else:
                uf(s1_data, s2_data, out.data)
            # The new signal has the reference of the s1 signal
            if isinstance(s1, Signal):
                out.ref = s1.ref
                out.freeze = s1.freeze
            elif isinstance(s2, Signal):
                out.ref = s2.ref
                out.freeze = s2.freeze
                
            # Handle dependencies
            if isinstance(s1, Signal):
                s1.connect('changed', out.on_changed, s1)
                s1.connect('begin-transaction', out.on_begin_transaction)
                s1.connect('end-transaction', out.on_end_transaction)
            if isinstance(s2, Signal):
                s2.connect('changed', out.on_changed, s2)
                s2.connect('begin-transaction', out.on_begin_transaction)
                s2.connect('end-transaction', out.on_end_transaction)
            out.connect('recompute', out.on_recompute, (uf, s1, s2, out))
            return out
        return oscopy_ufunc_binary

def make_fft_func(fft_func_name):
    ff = getattr(numpy.fft, fft_func_name)
    def oscopy_fft_func(s, n=None, axis=-1):
        def oscopy_fftfreq_func(s):
            out = numpy.fft.fftfreq((len(s.data), s.data[1] - s.data[0])*2)
            out = numpy.fft.fftshift(out)
            return out
        if not isinstance(s, Signal):
            return ff(s, n, axis)
        if s.ref.unit == "s":
            refunit = "Hz"
            refname = "Frequency"
        else:
            refunit = ""
        name = '%s(%s)' % (fft_func_name, s.name)
        unit = ""
        out = Signal(name, unit)
        out.data = ff(s.data)
        out.ref = Signal(refname, refunit)
        out.ref.data = numpy.fft.fftfreq(len(s.data), (s.ref.data[1] - s.ref.data[0])*2)
        s.connect('changed', out.on_changed, s)
        s.connect('begin-transaction', out.on_begin_transaction)
        s.connect('end-transaction', out.on_end_transaction)
        out.connect('recompute', out.on_recompute, (ff, s, None))
        out.ref.connect('recompute', out.ref.on_recompute, (oscopy_fftfreq_func, s))
        out.ref.data = numpy.fft.fftshift(out.ref.data)
        # Shall we connect the reference signals too ?
        return out
    return oscopy_fft_func

def init(ip):
    global _globals
    oscopy_magics = {'oadd': do_add,
                     'ocreate': do_create,
                     'ocontext': do_context,
                     'odelete': do_delete,
                     'odestroy': do_destroy,
                     'oexec': do_exec,
                     'ofactors': do_factors,
                     'ofiglist': do_figlist,
                     'ofreeze': do_freeze,
                     'ogui': do_gui,
                     'oimport': do_import,
                     'oinsert': do_insert,
                     'olayout': do_layout,
                     'omode': do_mode,
                     'orange': do_range,
                     'oread': do_read,
                     'orefresh': do_refresh,
                     'oremove': do_remove,
                     'oscale': do_scale,
                     'oselect': do_select,
                     'osiglist': do_siglist,
                     'ounfreeze': do_unfreeze,
                     'ounit': do_unit,
                     'oupdate': do_update,
                     'owrite': do_write}
    
    for name, func in oscopy_magics.items():
            ip.define_magic(name, func)

def set_ufuncs():
    for val in dir(numpy):
        if isinstance(getattr(numpy, val), numpy.ufunc):
            if getattr(numpy, val).nin == 1:
                _globals.update({val: make_ufunc_unary(val)})
                _globals[val].__doc__ = getattr(numpy, val).__doc__
                _globals[val].__name__ = getattr(numpy, val).__name__
            if getattr(numpy, val).nin == 2:
                _globals.update({val: make_ufunc_binary(val)})
                _globals[val].__doc__ = getattr(numpy, val).__doc__
                _globals[val].__name__ = getattr(numpy, val).__name__
    for val in dir(numpy.fft):
        if val.endswith('ifft'):
            pass
        elif val.endswith('fft'):
            _globals.update({val: make_fft_func(val)})
            _globals[val].__doc__ = getattr(numpy.fft, val).__doc__
            _globals[val].__name__ = getattr(numpy.fft, val).__name__
            
def update_current_figure_graph(figure=None, graph=None):
    global _current_figure
    global _current_graph
    _current_figure = figure
    _current_graph = graph


try:
    session_bus = dbus.SessionBus()
    bus_name = dbus.service.BusName('org.freedesktop.Oscopy', bus=session_bus)
except dbus.DBusException as e:
    print('DBus not available:', e)

ip = get_ipython()
c = ip.config
ioscopycfg = IOscopyConfig(config=c)
init(ip)
ioscopy_app = IOscopyApp(_ctxt, ip, '@datarootdir@')
ioscopy_app.set_application_id('org.gtk.oscopy')
ioscopy_app.register(None)
ioscopy_app.do_activate()

set_ufuncs()

# Process command line arguments
if ioscopycfg.h:
    # Help message
    print()
    msg=[]
    for name, trait in ioscopycfg.traits().items():
        if trait.get_metadata('help'):
            msg.append('   -%s\t%s' % (name, trait.get_metadata('help')))
    msg.sort()
    print('\n'.join(msg))
    exit()
if ioscopycfg.b:
    # Batch mode and interactive mode
    ip.run_line_magic("oexec", ioscopycfg.f)
    if not ioscopycfg.i:
        exit()

